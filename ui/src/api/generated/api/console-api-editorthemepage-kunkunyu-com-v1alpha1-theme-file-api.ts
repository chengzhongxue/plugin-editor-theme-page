/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.21
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateFileRequest } from '../models';
// @ts-ignore
import type { ThemeFile } from '../models';
// @ts-ignore
import type { UploadRequestFormData } from '../models';
// @ts-ignore
import type { WriteContentRequest } from '../models';
/**
 * ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi - axios parameter creator
 * @export
 */
export const ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} name 
         * @param {CreateFileRequest} [createFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileOrDirectory: async (name: string, createFileRequest?: CreateFileRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('createFileOrDirectory', 'name', name)
            const localVarPath = `/apis/console.api.editorthemepage.kunkunyu.com/v1alpha1/themefiles/{name}/file`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete file or directory in theme by given path
         * @param {string} name 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileInThemeFile: async (name: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteFileInThemeFile', 'name', name)
            const localVarPath = `/apis/console.api.editorthemepage.kunkunyu.com/v1alpha1/themefiles/{name}/files`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileContent: async (name: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getFileContent', 'name', name)
            const localVarPath = `/apis/console.api.editorthemepage.kunkunyu.com/v1alpha1/themefiles/{name}/file-content`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFilesInThemeFile: async (name: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('listFilesInThemeFile', 'name', name)
            const localVarPath = `/apis/console.api.editorthemepage.kunkunyu.com/v1alpha1/themefiles/{name}/files`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {File} file 
         * @param {string} [dir] Segments of the path, relative to the current static page, are divided by slashes to form multiple subpaths
         * @param {UploadRequestFormData} [formData] 
         * @param {boolean} [unzip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileToThemeFile: async (name: string, file: File, dir?: string, formData?: UploadRequestFormData, unzip?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('uploadFileToThemeFile', 'name', name)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadFileToThemeFile', 'file', file)
            const localVarPath = `/apis/console.api.editorthemepage.kunkunyu.com/v1alpha1/themefiles/{name}/upload`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (dir !== undefined) { 
                localVarFormParams.append('dir', dir as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (formData !== undefined) { 
                localVarFormParams.append('formData', new Blob([JSON.stringify(formData)], { type: "application/json", }));
            }
    
            if (unzip !== undefined) { 
                localVarFormParams.append('unzip', String(unzip) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [path] 
         * @param {WriteContentRequest} [writeContentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeContentToFile: async (name: string, path?: string, writeContentRequest?: WriteContentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('writeContentToFile', 'name', name)
            const localVarPath = `/apis/console.api.editorthemepage.kunkunyu.com/v1alpha1/themefiles/{name}/file-content`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(writeContentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi - functional programming interface
 * @export
 */
export const ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {CreateFileRequest} [createFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFileOrDirectory(name: string, createFileRequest?: CreateFileRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFileOrDirectory(name, createFileRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.createFileOrDirectory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete file or directory in theme by given path
         * @param {string} name 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFileInThemeFile(name: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFileInThemeFile(name, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.deleteFileInThemeFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileContent(name: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileContent(name, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.getFileContent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFilesInThemeFile(name: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ThemeFile>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFilesInThemeFile(name, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.listFilesInThemeFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {File} file 
         * @param {string} [dir] Segments of the path, relative to the current static page, are divided by slashes to form multiple subpaths
         * @param {UploadRequestFormData} [formData] 
         * @param {boolean} [unzip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFileToThemeFile(name: string, file: File, dir?: string, formData?: UploadRequestFormData, unzip?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFileToThemeFile(name, file, dir, formData, unzip, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.uploadFileToThemeFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {string} [path] 
         * @param {WriteContentRequest} [writeContentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async writeContentToFile(name: string, path?: string, writeContentRequest?: WriteContentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.writeContentToFile(name, path, writeContentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.writeContentToFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi - factory interface
 * @export
 */
export const ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiFp(configuration)
    return {
        /**
         * 
         * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiCreateFileOrDirectoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileOrDirectory(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiCreateFileOrDirectoryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createFileOrDirectory(requestParameters.name, requestParameters.createFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete file or directory in theme by given path
         * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiDeleteFileInThemeFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFileInThemeFile(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiDeleteFileInThemeFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.deleteFileInThemeFile(requestParameters.name, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiGetFileContentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileContent(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiGetFileContentRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getFileContent(requestParameters.name, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiListFilesInThemeFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFilesInThemeFile(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiListFilesInThemeFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ThemeFile>> {
            return localVarFp.listFilesInThemeFile(requestParameters.name, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFileToThemeFile(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.uploadFileToThemeFile(requestParameters.name, requestParameters.file, requestParameters.dir, requestParameters.formData, requestParameters.unzip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiWriteContentToFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        writeContentToFile(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiWriteContentToFileRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.writeContentToFile(requestParameters.name, requestParameters.path, requestParameters.writeContentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFileOrDirectory operation in ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.
 * @export
 * @interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiCreateFileOrDirectoryRequest
 */
export interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiCreateFileOrDirectoryRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiCreateFileOrDirectory
     */
    readonly name: string

    /**
     * 
     * @type {CreateFileRequest}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiCreateFileOrDirectory
     */
    readonly createFileRequest?: CreateFileRequest
}

/**
 * Request parameters for deleteFileInThemeFile operation in ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.
 * @export
 * @interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiDeleteFileInThemeFileRequest
 */
export interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiDeleteFileInThemeFileRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiDeleteFileInThemeFile
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiDeleteFileInThemeFile
     */
    readonly path?: string
}

/**
 * Request parameters for getFileContent operation in ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.
 * @export
 * @interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiGetFileContentRequest
 */
export interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiGetFileContentRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiGetFileContent
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiGetFileContent
     */
    readonly path?: string
}

/**
 * Request parameters for listFilesInThemeFile operation in ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.
 * @export
 * @interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiListFilesInThemeFileRequest
 */
export interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiListFilesInThemeFileRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiListFilesInThemeFile
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiListFilesInThemeFile
     */
    readonly path?: string
}

/**
 * Request parameters for uploadFileToThemeFile operation in ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.
 * @export
 * @interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFileRequest
 */
export interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFileRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFile
     */
    readonly name: string

    /**
     * 
     * @type {File}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFile
     */
    readonly file: File

    /**
     * Segments of the path, relative to the current static page, are divided by slashes to form multiple subpaths
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFile
     */
    readonly dir?: string

    /**
     * 
     * @type {UploadRequestFormData}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFile
     */
    readonly formData?: UploadRequestFormData

    /**
     * 
     * @type {boolean}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFile
     */
    readonly unzip?: boolean
}

/**
 * Request parameters for writeContentToFile operation in ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi.
 * @export
 * @interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiWriteContentToFileRequest
 */
export interface ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiWriteContentToFileRequest {
    /**
     * 
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiWriteContentToFile
     */
    readonly name: string

    /**
     * 
     * @type {string}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiWriteContentToFile
     */
    readonly path?: string

    /**
     * 
     * @type {WriteContentRequest}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiWriteContentToFile
     */
    readonly writeContentRequest?: WriteContentRequest
}

/**
 * ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi - object-oriented interface
 * @export
 * @class ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi
 * @extends {BaseAPI}
 */
export class ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi extends BaseAPI {
    /**
     * 
     * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiCreateFileOrDirectoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi
     */
    public createFileOrDirectory(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiCreateFileOrDirectoryRequest, options?: RawAxiosRequestConfig) {
        return ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiFp(this.configuration).createFileOrDirectory(requestParameters.name, requestParameters.createFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete file or directory in theme by given path
     * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiDeleteFileInThemeFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi
     */
    public deleteFileInThemeFile(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiDeleteFileInThemeFileRequest, options?: RawAxiosRequestConfig) {
        return ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiFp(this.configuration).deleteFileInThemeFile(requestParameters.name, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiGetFileContentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi
     */
    public getFileContent(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiGetFileContentRequest, options?: RawAxiosRequestConfig) {
        return ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiFp(this.configuration).getFileContent(requestParameters.name, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiListFilesInThemeFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi
     */
    public listFilesInThemeFile(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiListFilesInThemeFileRequest, options?: RawAxiosRequestConfig) {
        return ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiFp(this.configuration).listFilesInThemeFile(requestParameters.name, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi
     */
    public uploadFileToThemeFile(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiUploadFileToThemeFileRequest, options?: RawAxiosRequestConfig) {
        return ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiFp(this.configuration).uploadFileToThemeFile(requestParameters.name, requestParameters.file, requestParameters.dir, requestParameters.formData, requestParameters.unzip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiWriteContentToFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApi
     */
    public writeContentToFile(requestParameters: ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiWriteContentToFileRequest, options?: RawAxiosRequestConfig) {
        return ConsoleApiEditorthemepageKunkunyuComV1alpha1ThemeFileApiFp(this.configuration).writeContentToFile(requestParameters.name, requestParameters.path, requestParameters.writeContentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

